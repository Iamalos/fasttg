# AUTOGENERATED! DO NOT EDIT! File to edit: TGv2.ipynb.

# %% auto 0
__all__ = ['api_id', 'api_hash', 'bot_token', 'logger', 'settings', 'client', 'bot', 'setup_logging', 'Settings', 'add_keyword',
           'list_keywords', 'add_channel', 'update_monitored_channels', 'list_channels', 'monitor_channels', 'main']

# %% TGv2.ipynb 5
def setup_logging():
    log_file = f'bot_{datetime.now().strftime("%Y%m%d")}.log'

    # Set Telethon Logger to only show WARNING and above
    telethon_logger = logging.getLogger('telethon')
    telethon_logger.setLevel(logging.WARNING)
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers = [
            logging.FileHandler(log_file),
            logging.StreamHandler()
        ],
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    return logging.getLogger('telegram_monitor')

# %% TGv2.ipynb 9
class Settings:
    def __init__(self, filepath='settings.json'):
        self.filepath = Path(filepath)
        self.keywords, self.channels= set(), set()
        self.load()
        
    def load(self):
        if self.filepath.exists(): 
            data = json.loads(self.filepath.read_text())
            self.keywords = set(data.get('keywords',[]))
            self.channels = set(data.get('channels',[]))

    def save(self):
        data = {'keywords': list(self.keywords), 'channels': list(self.channels)}
        self.filepath.write_text(json.dumps(data, indent=2))

# %% TGv2.ipynb 10
load_dotenv()
api_id = os.getenv('TELEGRAM_API_ID')
api_hash = os.getenv('TELEGRAM_API_HASH')
bot_token = os.getenv('BOT_TOKEN')

logger = setup_logging()
settings = Settings()
client = TelegramClient('TGv2', api_id, api_hash)
bot = TelegramClient('bot', api_id, api_hash)#.start(bot_token=bot_token)

# %% TGv2.ipynb 12
@bot.on(events.NewMessage(pattern='/add_keyword (.+)'))
async def add_keyword(event):
    try:
        new_keywords = {k.strip().lower() for k in event.pattern_match.group(1).replace(',', ' ').split()} 
        settings.keywords.update(new_keywords)
        settings.save()
        logger.info(f'Added new keywords: {new_keywords}')
        await event.respond(f'Added keywords: {", ".join(new_keywords)}')
    except Exception as e:
        logger.error(f"Error adding keywords: {str(e)}", exc_info=True)
        await event.respond("Error adding keywords. Please try again.")

# %% TGv2.ipynb 13
@bot.on(events.NewMessage(pattern='/list_keywords'))
async def list_keywords(event):
    try:
        logger.info("Listing keywords")
        await event.respond(f'Keywords: {", ".join(settings.keywords) or "none"}')
    except Exception as e:
        logger.error(f"Error listing keywords: {str(e)}", exc_info=True)
        await event.respond("Error listing keywords. Please try again.")

# %% TGv2.ipynb 15
@bot.on(events.NewMessage(pattern='/add_channel (.+)'))
async def add_channel(event):
    try:
        new_channels = {c.strip().lower().replace('@', '') for c 
                        in event.pattern_match.group(1).replace(',', ' ').split()}
        settings.channels.update(new_channels)
        # update monitoring logic
        await update_monitored_channels()
        settings.save()
        await event.respond(f'Added channels: {", ".join("@" + c for c in new_channels)}')
    except Exception as e:
        logger.error("Error adding channels: {str(e)}", exc_info=True)
        await event.respiond("Error adding channels. Please try again.")

# %% TGv2.ipynb 16
async def update_monitored_channels():
    try:
        # Remove existing handler if any
        client.remove_event_handler(monitor_channels)
        if settings.channels:
            # Add new handler with current channels
            client.add_event_handler(monitor_channels, events.NewMessage(chats=list(settings.channels)))
            logger.info(f"Updated monitored channels: {settings.channels}")
        else:
            logger.info("No channels to monitor.")
    except Exception as e:
        logger.error(f"Error updating monitored channels: {str(e)}", exc_info=True)

# %% TGv2.ipynb 17
@bot.on(events.NewMessage(pattern='/list_channels'))
async def list_channels(event):
    try:
        logger.info("Listing channels")
        await event.respond(f'Monitored channels: {", ".join("@" + c for c in settings.channels) or "none"}')

    except Exception as e:
        logger.error(f"Error listing channels: {str(e)}", exc_info=True)
        await event.respond("Error listing channels. Please try again")

# %% TGv2.ipynb 19
async def monitor_channels(event):
    try:
        if any(k.lower() in event.text.lower() for k in settings.keywords):
            # TODO: forward message + highlight found text. Now we don't get any text context - just check that it is in message
            channel = await event.get_chat()
            logger.info(f"Keyword match in @{channel.username}")
    except Exception as e:
        logger.error(f"Error in monitor_channels: {str(e)}", exc_info=True)

# %% TGv2.ipynb 20
async def main():
    try:
        logger.info("Starting bot...")
        await client.start()
        await bot.start(bot_token=bot_token)
        # Initial setup of monitoring
        await update_monitored_channels() 
        logger.info("Bot started successfully")
        # Run both clients concurrently
        await asyncio.gather(
            client.run_until_disconnected(),
            bot.run_until_disconnected()
        )
      
    except Exception as e:
        logger.error(f"Error in main: {str(e)}", exc_info=True)

    finally:
        await client.disconnect()
        logger.info("Client shutting down...")
        await bot.disconnect()
        logger.info("Bot shutting down...")

# %% TGv2.ipynb 21
if __name__ == '__main__':
    asyncio.run(main())
